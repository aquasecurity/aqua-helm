# Specifies the secret data for imagePullSecrets needed to fetch the private docker images
imageCredentials:
# If imageCredentials.create=false and imageCredentials.name not defined
# then will be used secret aqua-registry-secret which created by aqua-server helm chart
#####################
# If imageCredentials.create=false and imageCredentials.name defined then will be used secret with defined name
# but in this case secret should be created manually before chart deploying
#####################
# If imageCredentials.create=create and imageCredentials.name not defined
# then will be created a secret with name <Chart ReleaseName>-registry-secret
#####################
# If imageCredentials.create=create and imageCredentials.name defined
# then will be created a secret with name provided name
  create: false
  name: # example
  repositoryUriPrefix: "registry.aquasec.com" # for dockerhub - "docker.io"
  registry: "registry.aquasec.com" #REQUIRED only if create is true, for dockerhub - "index.docker.io/v1/"
  username: ""
  password: ""

# If serviceAccount.create=false and serviceAccount.name not defined
# then will be used serviceAccount aqua-sa which created by aqua-server helm chart
#####################
# If serviceAccount.create=false and serviceAccount.name defined then will be used serviceAccount with defined name
# but in this case serviceAccount should be created manually before chart deploying
#####################
# If serviceAccount.create=create and serviceAccount.name not defined
# then will be created a serviceAccount with name <Chart ReleaseName>-sa
#####################
# If serviceAccount.create=create and serviceAccount.name defined
# then will be created a serviceAccount with name provided name
serviceAccount:
  create: false
  name: ""

#Please specify k8s platform acronym. Allowed values are aks, eks, gke, openshift, tkg, tkgi, k8s
# aks = Azure Kubernetes Service
# gke = Google kubernetes Engine
# openshift = RedHat Openshift/OCP
# tkg = VMware Tanzu kubernetes Grid
# tkgi = VMware Tanzu kubernetes Grid Integrated Edition
# k8s = Plain/on-prem Vanilla Kubernetes
# rancher = Rancher Kubernetes Platform
# gs = GaintSwarm platform
# k3s = k3s kubernetes platform
# mke = Mirantis Kubernetes Engine
platform: ""

# Specify whether to enable/disable the cache by using "yes", "true", "no", "false" values.
aqua_enable_cache: "yes"
# default value is 60
aqua_cache_expiration_period: "60"

image:
  repository: "kube-enforcer"
  tag: "6.5"
  pullPolicy: Always

ke_ReplicaCount: "1"

nameOverride: "aqua-kube-enforcer"
fullnameOverride: "aqua-kube-enforcer"

# Display a custom cluster name in the infrastructure tab of Aqua Enterprise
clusterName: "aqua-secure"
logicalName: ""
logLevel: ""

# Set create to false if you want to use an existing secret for the kube-enforcer certs
# If certsSecret.create and certsSecret.name defined then need provide certsSecret.serverCertificate and
# certsSecret.serverKey and webhooks.caBundle encrypted with base64 and secret for TLS connectivity with kube-api will be created
# If you want to use auto generated self-signed certificates use option certsSecret.autoGenerated=true and all required self-signed
# certificates will be created and added to secret with name certsSecret.name
# Please be aware that if you already has TLS secret created in cluster and decided to use option certsSecret.autoGenerate
# It will fail with following error. To solve it delete previously create secret kubectl delete secret aqua-kube-enforcer-certs -n aqua
# Error: UPGRADE FAILED: error validating "": error validating data: unknown object type "nil" in Secret.data.ca.crt
certsSecret:
  autoGenerate: false
  create: true
  # If you're using existing certs change the name to existing secret name
  name: "aqua-kube-enforcer-certs"
  serverCertificate: ""
  serverKey: ""

aquaSecret:
  create: true
  name: "aqua-kube-enforcer-token"
  # Enter the enforcer token in "clear-text" format without quotes generated from the Console UI
  kubeEnforcerToken: ke-token

gateway:
  # change address to gateway endpoint
  address: aqua-gateway-svc.aqua
  port: 8443

clusterRole:
  name: "aqua-kube-enforcer"

clusterRoleBinding:
  name: "aqua-kube-enforcer"

role:
  name: "aqua-kube-enforcer"

roleBinding:
  name: "aqua-kube-enforcer"

webhooks:
  # set this field true if you're using cert-manager and don't need to pass a caBundle
  certManager: false
  # Add base64 value of the CA cert/Ca Bundle/RootCA Cert if certificates are not generated from cert-manager to webhooks.caBundle
  caBundle: ""
  failurePolicy: Ignore
  validatingWebhook:
    name: "kube-enforcer-admission-hook-config"
    annotations: {}
  mutatingWebhook:
    name: "kube-enforcer-me-injection-hook-config"
    annotations: {}
      #cert-manager.io/inject-ca-from: < namespace >/< certsSecret.name >
      #If you are using webhooks.certManager=true, so need to add cert-manager annotations

securityContext:
  runAsUser: 11431
  runAsGroup: 11433
  fsGroup: 11433

container_securityContext: {}

readinessProbe:
  httpGet:
    path: /readyz
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30

livenessProbe:
  httpGet:
    path: /healthz
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30

## Please use the below probes for KubeEnforcer version < 6.5.22052 or version != latest
## livenessProbe:
##   tcpSocket:
##     port: 8080
##   initialDelaySeconds: 60
##   periodSeconds: 30
## 
## readinessProbe:
##   tcpSocket:
##     port: 8080
##   initialDelaySeconds: 60
##   periodSeconds: 30

resources: {}
  # Note: For recommendations please check the official sizing guide.
  # requests:
  #   cpu: 250m
  #   memory: 0.2Gi
  # limits:
  #   cpu: 500m
  #   memory: 1.5Gi

nodeSelector: {}
tolerations: []
podAnnotations: {}
affinity: {}

TLS:
  # enable to true for secure communication
  enabled: false
  # provide certificates secret name created to enable tls/mtls communication between enforcer and gateway/envoy
  secretName: "ke-mtls-certs"
  # provide filename of the public key eg: aqua_web.crt
  publicKey_fileName: ""
  # provide filename of the private key eg: aqua_web.key
  privateKey_fileName: ""
  # provide filename of the rootCA, if using self-signed certificates eg: rootCA.crt
  rootCA_fileName: ""
  # change it to true for enabling mTLS between enforcer and gateway/envoy
  tls_verify: false

# extraEnvironmentVars is a list of extra environment variables to set in the kube-enforcer deployment
# https://docs.aquasec.com/docs/kubeenforcer-variables
extraEnvironmentVars:
  # ENV_NAME: value
  # For example:
  # AQUA_CACHE_EXPIRATION_PERIOD: 60

# extraSecretEnvironmentVars is a list of extra environment variables to set in the enforcer daemonset.
# These variables take value from existing Secret objects.
extraSecretEnvironmentVars: []
  # - envName: ENV_NAME
  #   secretName: name
  #   secretKey: key

starboard:
  replicaCount: "1"
  appName: "starboard-operator"
  serviceAccount:
    name: "starboard-operator"
  clusterRoleBinding:
    name: "starboard-operator"
  clusterRole:
    name: "starboard-operator"
  automountServiceAccountToken: "true"

  securityContext: {}

  image:
    repositoryUriPrefix: "docker.io/aquasec"
    repository: "starboard-operator"
    tag: "0.13.0"
    pullPolicy: Always

  container_securityContext:
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  OPERATOR_NAMESPACE: "aqua"
  OPERATOR_TARGET_NAMESPACES: ""
  OPERATOR_LOG_DEV_MODE: "false"
  OPERATOR_CONCURRENT_SCAN_JOBS_LIMIT: "10"
  OPERATOR_SCAN_JOB_RETRY_AFTER: "30s"
  OPERATOR_METRICS_BIND_ADDRESS: ":8080"
  OPERATOR_HEALTH_PROBE_BIND_ADDRESS: ":9090"
  OPERATOR_CIS_KUBERNETES_BENCHMARK_ENABLED: "false"
  OPERATOR_VULNERABILITY_SCANNER_ENABLED: "false"
  OPERATOR_BATCH_DELETE_LIMIT: "10"
  OPERATOR_BATCH_DELETE_DELAY: "10s"

  conftest_resources_requests_cpu: "1m"
  conftest_resources_requests_memory: "10M"
  conftest_resources_limits_cpu: "15m"
  conftest_resources_limits_memory: "40M"

  ports:
    metricContainerPort: 8080
    probeCntainerPort: 9090

  readinessProbe:
    httpGet:
      path: /readyz/
      port: probes
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3

  livenessProbe:
    httpGet:
      path: /healthz/
      port: probes
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 10

  nodeSelector: {}

##Kube Enforcer advance deployment options
### Advanced Deployment (for Pod Enforcer injection)
### When using KubeEnforcers for Pod Enforcer injection, it is recommended that you deploy the KubeEnforcers in a special Advanced configuration.
### This will cause Pod Enforcer traffic to be routed to the KubeEnforcers via a local envoy, which then forwards the traffic to an Aqua Gateway.
### This configuration improves performance and reduces remote network connections between pods and Gateways.
kubeEnforcerAdvance:
  enable: false
  nodeID: "envoy"

  envoy:
    image:
      repository: "envoy"
      tag: "6.5"
      pullPolicy: Always

    # Enabling Envoy requires the use of TLS certificates for the cluster section, while the cluster TLS section is optional and to be enabled if TLS is in use for kube-enforcer and gateway.
    # Find the instructions in the readme for help with generating the required certificates.
    TLS:
      listener:
        # true to enable secure communication between Aqua Envoy and Gateways
        enabled: false
        # provide secret name containing the certificates
        secretName: "envoy-mtls-certs"
        # provide filename of the public key in the secret eg: aqua-lb.crt
        publicKey_fileName: ""
        # provide filename of the private key in the secret eg: aqua-lb.key
        privateKey_fileName: ""
        # optional: use this field if using a custom CA or chain
        rootCA_fileName: ""

    readinessProbe:
      exec:
        command:
        - cat
        - /etc/aquasec/envoy/configured
      initialDelaySeconds: 30
      periodSeconds: 10

    livenessProbe: {}

    resources: {}

    ## Enabling this will replace any templated envoy configuration with the list of files passed below
    custom_envoy_files: {}
#      envoy.yaml: |-
#        node:
#          cluster: {{ .Values.clusterName | default "k8s" }}
#          id: {{ .Values.kubeEnforcerAdvance.nodeID | default "envoy" }}
#
#        dynamic_resources:
#          cds_config:
#            path: /etc/aquasec/envoy/cds.yaml
#            initial_fetch_timeout: 0s
#          lds_config:
#            path: /etc/envoy/lds.yaml
#      lds.yaml: |-
#        resources:
#          - "@type": type.googleapis.com/envoy.config.listener.v3.Listener
#            name: listener_0
#            address:
#              socket_address:
#                address: 0.0.0.0
#                port_value: 8443
#            filter_chains:
#              - filters:
#                  - name: envoy.filters.network.http_connection_manager
#                    typed_config:
#                      "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
#                      stream_idle_timeout: 0s
#                      drain_timeout: 20s
#                      access_log:
#                        - name: envoy.access_loggers.file
#                          typed_config:
#                            "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
#                            path: "/dev/stdout"
#                      codec_type: AUTO
#                      stat_prefix: ingress_https
#                      route_config:
#                        name: local_route
#                        virtual_hosts:
#                          - name: https
#                            domains:
#                              - "*"
#                            routes:
#                              - match:
#                                  prefix: "/agent_grpc_channel.GWChannelV2/PushNotificationHandler"
#                                  grpc: { }
#                                route:
#                                  cluster: aqua-kube-enforcer
#                                  timeout: 0s
#                              - match:
#                                  prefix: "/"
#                                  grpc: { }
#                                route:
#                                  cluster: aqua-gateway
#                                  timeout: 0s
#                              - match:
#                                  prefix: "/"
#                                route:
#                                  cluster: aqua-kube-enforcer-k8s
#                                  timeout: 0s
#
#                      http_filters:
#                        - name: envoy.filters.http.health_check
#                          typed_config:
#                            "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
#                            pass_through_mode: false
#                            headers:
#                              - name: ":path"
#                                exact_match: "/healthz"
#                              - name: "x-envoy-livenessprobe"
#                                exact_match: "healthz"
#                        - name: envoy.filters.http.router
#                          typed_config: { }
#                transport_socket:
#                  name: envoy.transport_sockets.tls
#                  typed_config:
#                    "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
#                    common_tls_context:
#                      alpn_protocols: "h2,http/1.1"
#                      tls_certificates:
#                        - certificate_chain:
#                            filename: "/etc/ssl/envoy/server.crt"
#                          private_key:
#                            filename: "/etc/ssl/envoy/server.key"
#      cds.yaml: |-
#        resources:
#        - "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
#          name: aqua-kube-enforcer
#          connect_timeout: 180s
#          type: STRICT_DNS
#          dns_lookup_family: V4_ONLY
#          lb_policy: ROUND_ROBIN
#          http2_protocol_options:
#            hpack_table_size: 4294967
#            max_concurrent_streams: 2147483647
#          circuit_breakers:
#            thresholds:
#              max_pending_requests: 2147483647
#              max_requests: 2147483647
#          load_assignment:
#            cluster_name: aqua-kube-enforcer
#            endpoints:
#              - lb_endpoints:
#                - endpoint:
#                    address:
#                      socket_address:
#                        address: localhost
#                        port_value: 8442
#          transport_socket:
#            name: envoy.transport_sockets.tls
#            typed_config:
#              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
#              sni: aqua-kube-enforcer
#        - "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
#          name: aqua-kube-enforcer-k8s
#          connect_timeout: 180s
#          type: STRICT_DNS
#          dns_lookup_family: V4_ONLY
#          lb_policy: ROUND_ROBIN
#          circuit_breakers:
#            thresholds:
#              max_pending_requests: 2147483647
#              max_requests: 2147483647
#          load_assignment:
#            cluster_name: aqua-kube-enforcer-k8s
#            endpoints:
#              - lb_endpoints:
#                - endpoint:
#                    address:
#                      socket_address:
#                        address: localhost
#                        port_value: 8449
#          transport_socket:
#            name: envoy.transport_sockets.tls
#            typed_config:
#              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
#              sni: aqua-kube-enforcer-k8s
#        - "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
#          name: aqua-gateway
#          connect_timeout: 180s
#          type: STRICT_DNS
#          dns_lookup_family: V4_ONLY
#          lb_policy: ROUND_ROBIN
#          http2_protocol_options:
#            hpack_table_size: 4294967
#            max_concurrent_streams: 2147483647
#          circuit_breakers:
#            thresholds:
#              max_pending_requests: 2147483647
#              max_requests: 2147483647
#          load_assignment:
#            cluster_name: aqua-gateway
#            endpoints:
#              - lb_endpoints:
#                - endpoint:
#                    address:
#                      socket_address:
#                        address: aqua-gateway.aqua
#                        port_value: 8443
#          transport_socket:
#            name: envoy.transport_sockets.tls
#            typed_config:
#              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
#              sni: aqua-gateway
#      validation_context_sds_secret.yaml: |-
#        resources:
#          - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
#            name: "validation_context_sds"
#            validation_context:
#              trusted_ca:
#                filename: /etc/aquasec/envoy/ca-certificates.crt
