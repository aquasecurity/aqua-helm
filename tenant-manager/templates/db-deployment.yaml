{{- if not .Values.db.external.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-tm-db
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-tm-db
{{ include "aqua.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-tm-db
  template:
    metadata:
      annotations:
      {{- if and (.Values.db.tolerations) (semverCompare "<1.6-0" .Capabilities.KubeVersion.GitVersion) }}
        scheduler.alpha.kubernetes.io/tolerations: '{{ toJson .Values.db.tolerations }}'
      {{- end }}
      {{- with .Values.db.podAnnotations }}
      {{- range $key,$value := . }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      labels:
        app: {{ .Release.Name }}-tm-db
{{ include "aqua.labels" . | indent 8 }}
      name: {{ .Release.Name }}-tm-db
    spec:
      {{- with .Values.db.securityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      serviceAccount: {{ .Release.Name }}-sa
      initContainers:
      - name: {{ .Release.Name }}-db-init
        env:
        - name: POSTGRES_PASSWORD
        {{- if .Values.db.passwordFromSecret.enabled }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.passwordFromSecret.dbPasswordName }}
              key: {{ .Values.db.passwordFromSecret.dbPasswordKey }}
        {{- else }}
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-tm-db-password
              key: db-password
        {{- end }}
        image: "{{ .Values.imageCredentials.repositoryUriPrefix }}/{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
        command: [ "sh", "-c", "[ -f $PGDATA/server.key ] && chmod 600 $PGDATA/server.key || echo 'OK' " ]
        volumeMounts:
        - mountPath: /var/lib/postgresql/data-files
          name: postgres-database
      containers:
      - name: tm-db
        {{- with .Values.db.container_securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
        image: "{{ .Values.imageCredentials.repositoryUriPrefix }}/{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
        imagePullPolicy: "{{ .Values.db.image.pullPolicy }}"
        env:
        - name: POSTGRES_PASSWORD
        {{- if .Values.db.passwordFromSecret.enabled }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.passwordFromSecret.dbPasswordName }}
              key: {{ .Values.db.passwordFromSecret.dbPasswordKey }}
        {{- else }}
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-tm-db-password
              key: db-password
        {{- end }}
        {{- include "tenantmanager.extraEnvironmentVars" .Values.db | nindent 8 }}
        {{- include "tenantmanager.extraSecretEnvironmentVars" .Values.db | nindent 8 }}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data-files
          name: postgres-database
        ports:
        - containerPort: 5432
          protocol: TCP
{{- with .Values.db.livenessProbe }}
        livenessProbe:
{{ toYaml . | indent 10 }}
{{- end }}
{{- with .Values.db.readinessProbe }}
        readinessProbe:
{{ toYaml . | indent 10 }}
{{- end }}
        resources:
{{ toYaml .Values.db.resources | indent 10 }}
      {{- with .Values.db.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.db.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- if and (.Values.db.tolerations) (semverCompare "^1.6-0" .Capabilities.KubeVersion.GitVersion) }}
      tolerations:
{{ toYaml .Values.db.tolerations | indent 6 }}
      {{- end }}
      volumes:
      - name: postgres-database
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-tm-db-pvc
{{- end }}
      imagePullSecrets:
        - name: {{ .Values.imageCredentials.name }}
